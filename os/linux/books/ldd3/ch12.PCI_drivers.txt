ch12
https://static.lwn.net/images/pdf/LDD3/ch12.pdf


Registering a PCI Driver
================================================================================
In summary, to create a proper struct pci_driver structure, only four fields need
to be initialized:
	static struct pci_driver pci_driver = {
		.name = "pci_skel",
		.id_table = ids,
		.probe = probe,
		.remove = remove,
	};

To register the struct pci_driver with the PCI core, a call to pci_register_driver is
made with a pointer to the struct pci_driver. This is traditionally done in the module
initialization code for the PCI driver:
	static int __init pci_skel_init(void)
	{
		return pci_register_driver(&pci_driver);
	}


Old-Style PCI Probing
================================================================================
struct pci_dev *pci_get_device(unsigned int vendor, unsigned int device,
		 struct pci_dev *from);

struct pci_dev *pci_get_subsys(unsigned int vendor, unsigned int device,
		 unsigned int ss_vendor, unsigned int ss_device, struct pci_dev *from);

struct pci_dev *pci_get_slot(struct pci_bus *bus, unsigned int devfn);
	This function searches the list of PCI devices in the system on the specified
	struct pci_bus for the specified device and function number of the PCI device.  If
	a device is found that matches, its reference count is incremented and a pointer
	to it is returned. When the caller is finished accessing the struct pci_dev, it must
	call pci_dev_put.


Enabling the PCI Device
================================================================================
int pci_enable_device(struct pci_dev *dev);


Accessing the Configuration Space
================================================================================

As far as the driver is concerned, the configuration space can be accessed through 8-
bit, 16-bit, or 32-bit data transfers. The relevant functions are prototyped in <linux/
pci.h>:
int pci_read_config_byte(struct pci_dev *dev, int where, u8 *val);
int pci_read_config_word(struct pci_dev *dev, int where, u16 *val);
int pci_read_config_dword(struct pci_dev *dev, int where, u32 *val);

the following small function retrieves the revision ID of a device by passing the symbolic
name for where to pci_read_config_byte:
static unsigned char skel_get_revision(struct pci_dev *dev)
{
	u8 revision;
	pci_read_config_byte(dev, PCI_REVISION_ID, &revision);
	return revision;
}


Accessing the I/O and Memory Spaces
================================================================================
In the kernel, the I/O regions of PCI devices have been integrated into the generic
resource management. For this reason, you don’t need to access the configuration
variables in order to know where your device is mapped in memory or I/O space.
The preferred interface for getting region information consists of the following
functions:

unsigned long pci_resource_start(struct pci_dev *dev, int bar);
	The function returns the first address (memory address or I/O port number)
	associated with one of the six PCI I/O regions. The region is selected by the integer
	bar (the base address register), ranging from 0–5 (inclusive).

unsigned long pci_resource_end(struct pci_dev *dev, int bar);
	The function returns the last address that is part of the I/O region number bar.
	Note that this is the last usable address, not the first address after the region.

unsigned long pci_resource_flags(struct pci_dev *dev, int bar);
	This function returns the flags associated with this resource.
	Resource flags are used to define some features of the individual




================================================================================
bdf: bus device function
bar: Base Address Register
CONFIG_ADDRESS: 0xCF8
CONFIG_DATA: 0xCFC

Two 32-bit I/O locations are used, the first location (0xCF8) is named
CONFIG_ADDRESS, and the second (0xCFC) is called CONFIG_DATA. CONFIG_ADDRESS
specifies the configuration address that is required to be accesses, while
accesses to CONFIG_DATA will actually generate the configuration access and will
transfer the data to or from the CONFIG_DATA register.

The CONFIG_ADDRESS is a 32-bit register with the format shown in following
figure. Bit 31 is an enable flag for determining when accesses to CONFIG_DATA
should be translated to configuration cycles. Bits 23 through 16 allow the
configuration software to choose a specific PCI bus in the system. Bits 15
through 11 select the specific device on the PCI Bus. Bits 10 through 8 choose a
specific function in a device (if the device supports multiple functions).
The least significant byte selects the offset into the 256-byte configuration
space available through this method. Since all reads and writes must be both
32-bits and aligned to work on all implementations, the two lowest bits of
CONFIG_ADDRESS must always be zero, with the remaining six bits allowing you to
choose each of the 64 32-bit words. If you don't need all 32 bits, you'll have
to perform the unaligned access in software by aligning the address, followed by
masking and shifting the answer.

    31     	30 - 24	    23 - 16	     15 - 11	 		10 - 8	         7 - 2	     1 - 0
Enable Bit  Reserved   Bus Number  Device Number   Function Number	Register Number    00

================================================================================
The slot/function address of each device is encoded in a single byte as follows:
	7:3 = slot	=> dev
	2:0 = function
