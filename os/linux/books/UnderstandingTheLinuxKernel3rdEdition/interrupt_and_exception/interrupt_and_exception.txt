interrupt and exception

================================================================================
分类：

同步中断（异常）：	cpu产生，一条指令终止后才会发出
	产生情况：
	（1）程序的错误，			--> 内核发送信号处理异常
	（2）内核必须处理的异常条件 --> 内核执行恢复异常需要的所有步骤

异步中断（中断）：	间隔定时器和IO设备产生,随机


--------------------------------------------------------------------------------
中断时，要在内核态堆栈保存程序计数器的当前值（eip和cs）,并把与中断类型相关的地址
放进程序计数器。

中断处理与进程切换的差异？
	它执行的代码是一个内核控制路径，代表中断发生时正在运行的进程执行。
	为什么这样说？

中断处理需要满足的约束：
	(1) 尽可能快，更多处理尽可能向后推迟。
		响应中断后的操作：关键紧急，立即执行;其余推迟

	(2) 允许嵌套执行
	(3) 临界区，禁止中断。限制临界区，尽可能开中断执行。

--------------------------------------------------------------------------------
中断分类：
	(1) 可屏蔽： IO设备发出的。两种状态，屏蔽的/非屏蔽的
			可设置中断允许标志
	(2) 非屏蔽： 危机事件引起
			不受中断允许标志影响。

异常分类：
	(1) 处理器探测异常：cpu执行指令时探测到一个反常条件产生
		进一步分为三组：
		(a) 故障：
			可纠正后重新执行
			引起故障的指令地址 --> eip
		(b) 陷阱:
			用于调试程序
			立即报告，内核把控制权返回给程序后，继续执行下一条指令。
			随后执行的指令 --> eip
		(c) 异常中止：
			报告严重错误，控制单元出问题
			不能保存引起异常的指令所在的确切位置。eip
			紧急信号--> 将控制权切换到异常中止处理程序 --> 终止进程

	(2) 编程异常(软中断)：
		编程者发出请求.
		(a) int/int3 指令触发。	
		(b) into(检查溢出)和bound(检查地址出界) 检查的条件不为真
		控制单元把编程异常作为陷阱来处理。

		用途：
			(a)系统调用
			(b)给调试程序通报特定事件

中断和异常的标识：0~255
	一个向量(vector): 8位的无符号整数
	非屏蔽中断和异常的向量： 固定
	可屏蔽中断的向量：对终端控制器编程

--------------------------------------------------------------------------------
IRQ 和 中断

能够发出中断请求的中断控制器	-->  IRQ (Interrupt ReQuest) line
IRQ lines	-->		PIC (Programmable Interrupt Controller) 输入引脚 

可编程中断控制器(PIC)执行的动作：
	(1) 监视 IRQ line.
	(2) 一个引发信号出现:
			a. 转换成对应的向量
			b. 将向量存在 PIC 一个I/O端口，允许CPU 通过数据总线读此向量
			c. 把引发信号发送到处理器的 INTR 引脚，即产生一个中断 
			d. 等待，直到cpu把中断信号写进PIC的一个I/O端口来确认它, 清INTR
		两个及以上的 IRQ 线上产生信号，选择引脚编号较小的。
	(3) 返回第一步


IRQ 线从0开始顺序编号.

IRQ 和 向量之间的映射：
	IRQn --> Intel 缺省向量：n+32
	修改：向 PIC 端口发布命令

禁止或激活IRQ线： 对PIC编程

禁止的中断不会丢失，一旦被激活，PIC 就把它们发送到CPU.这允许中断处理程序
逐次处理同一类型的 IRQ.

可屏蔽中断的全局屏蔽/非屏蔽：
	eflags 寄存器的IF标志，清0, PIC 发布的每个可屏蔽中断，都由CPU忽略。	
	cli/sti 清除/设置 IF 标志

传统的PIC:
	2片8259A风格的外部芯片级联。15个IRQ线可用
	每个芯片8个IRQ输入线。
	从PIC 的INT 输出线	--> 主PIC 的IRQ2引脚.

以上仅涉及单处理器系统设计的PIC 

--------------------------------------------------------------------------------
高级可编程中断控制器

I/O高级可编程中断控制器 替代 8259A PIC
每个CPU含有一个本地APIC.

每个本地APIC组成：
	a. 32位的寄存器
	b. 一个内部时钟
	c. 一个本地定时设备
	d. 本地APIC IRQ线，LINT0/1

多APIC 系统：
	所有本地 APIC 连接到一个外部 I/O APIC;
	来自设备的 IRQ 线连接到I/O APIC;

相对于本地 APIC, I/O APIC 起路由器的作用。
APIC 总线及其信息对软件不可见。不必关心

I/O APIC 组成：
	a. 一组24条IRQ线
	b. 一张24项的中断重定向表(Interrupt Redirection Table)
	c. 可编程寄存器
	d. 通过 APIC 总线发送和接受 APIC 信息的一个信息单元

I/O APIC中断优先级:
	不与引脚号相关联;
	中断重定向表的每一项(可编程) -->  中断向量，优先级，目标处理器，选择处理器的方式
	重定向表的信息用途：
		用于把每个外部 IRQ 信号转换为一条消息，通过APIC 总线把消息发送给一个或多
		个本地APIC 单元.

中断请求在CPU之间的分发方式：
	(1) 静态分发：
		IRQ 信号 --> 重定向表项中所列 本地APIC --> 特定/一组/所有CPU
	(2) 动态分发: 
		IRQ 信号传递给 执行最低优先级进程的处理器 中的本地APIC

		本地APIC中的 可编程任务优先级寄存器(task priority register, TPR)
	计算当前运行进程的优先级。内核中每次进程切换时修改。

		两个及以上CPU共享最低优先级，利用仲裁技术在这些CPU之间分配负荷。
		给每个CPU中的本地 APIC 的仲裁优先级寄存器都分配一个0(最低)~15(最高)
	范围内的值。

	仲裁技术：
		接受到中断的CPU,其仲裁优先级置零，其他CPU的仲裁优先级都增加1。下次中断会
		优先分发到其他增加了1的CPU上。
		当仲裁寄存器优先级大于15时，就把它置为获胜CPU的前一个仲裁优先级加1。?
		中断以轮转方式在CPU之间分发，且具有相同的任务优先级。


多APIC系统允许CPU产生处理器间中断(interprocessor interrupt,IPI):
	(1) 在自己本地APIC的中断指令寄存器(ICR)中存放 中断向量和目标本地 APIC
		的标识符.
	(2) 通过 APIC 总线，向目标本地APIC发送一条消息
	(3) 从而向自己的 CPU 发出一条中断
IPI 用来在CPU之间交换信息.


SMP 体系结构

单处理器系统使用 I/O APIC 芯片的配置方式：
	(1) 以标准8259A方式连接到CPU.
		禁止本地APIC,LINT0 配置为INTR, LINT1 配置为NMI
	(2) 作为标准外部 I/O APIC。
		本地 APIC 被激活，所有外部中断通过 I/O APIC 接收。

--------------------------------------------------------------------------------
异常
80x86 约20种
每种异常	-->		异常处理程序	-->		发送signal 到引起异常的进程
cpu 在执行异常处理程序前，产生一个硬件出错码，压入内核态堆栈。

================================================================================
中断描述符
IDT, Interrupt Descriptor Table,系统表
IDT	-->	中断/异常处理程序的入口地址
	中断/异常向量




