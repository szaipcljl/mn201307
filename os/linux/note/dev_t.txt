Linux设备号的构成和分配内核机制

1.设备号的构成
--------------
主设备号和次设备号

主设备号来定位对应的设备驱动程序（即是主设备找驱动），
次设备号用来标识它同个驱动所管理的若干的设备（次设备号找设备）

dev_t类型: 标识一个设备号，32位的无符号整数
#include <linux/types.h>
typedef __u32 __kernel_dev_t;
typedef __kernel_dev_t      dev_t;

12为主设备号，20为次设备

dev_t
+---------------+-------------------------+
|  Major(12bit) |   Minor(20bit)          |
+---------------+-------------------------+

保证在主次设备号位宽发生变化时，程序依然可以工作，提供了几个宏：
#include  <linux/kdev_t.h>
#define MINORBITS   20
#define MINORMASK   ((1U << MINORBITS) - 1)

#define MAJOR(dev)  ((unsigned int) ((dev) >> MINORBITS))
#define MINOR(dev)  ((unsigned int) ((dev) & MINORMASK))
#define MKDEV(ma,mi)    (((ma) << MINORBITS) | (mi))

MAJOR: 从一个dev_t 类型的设备号中提取出主设备号
MINOR: 提取次设备号
MKDEV: 将主设备号ma和次设备号mi合成一个dev_t类型的设备号


实际的驱动开发中，经常已知inode，可以通过inode来获得主次设备号：
static inline unsigned iminor(const struct inode *inode)
{
	    return MINOR(inode->i_rdev);
}

static inline unsigned imajor(const struct inode *inode)
{
	    return MAJOR(inode->i_rdev);
}

iminor用于根据inode获得次设备号，
imajor用于根据inode获得主设备号

2.设备号的分配和管理
--------------------
进行设备号的分配与管理的函数有两个：
register_chrdev_region
alloc_chrdev_region

(1) register_chrdev_region函数
静态注册设备号，
优点: 注册时知道其设备号，
缺点: 可能会与系统中已经注册的设备号冲突导致注册失败

//fs/char_dev.c
register_chrdev_region() - register a range of device numbers
核心功能体现在__register_chrdev_region函数中

全局的指针数组chrdevs: 内核用于设备号分配和管理的核心元素
fs/char_dev.c
static struct char_device_struct {
	struct char_device_struct *next;
	unsigned int major;//主设备号
	unsigned int baseminor;//第一个次设备号
	int minorct;//次设备的个数
	char name[64]; //驱动名
	struct cdev *cdev; /* will die */
} *chrdevs[CHRDEV_MAJOR_HASH_SIZE];
//#define CHRDEV_MAJOR_HASH_SIZE    255
这个数组的每一项都是一个指向struct char_device_struct类型的指针。

register_chrdev_region函数，完成的主要功能:
将当前设备驱动程序要使用的设备记录到chrdevs数组中，而有了这种对设备号使用情况的跟踪，
系统就可以避免不同的设备驱动程序使用同一个设备号的情况出现。
这就意味着当驱动程序调用这个函数时，事先已经明确知道他要使用的设备号，
之所以调用这个函数，是要将所管理的设备号纳入到内核的设备号管理体系中，
防止被的驱动程序错误使用到。

搜索chrdevs数组，是通过哈希表的形式进行的,首先会通过主设备号生成一个散列关键值：
i = major_to_index(major); 
static inline int major_to_index(unsigned major)
{
	    return major % CHRDEV_MAJOR_HASH_SIZE;
}

//i = major %255
函数将对chrdevs[i]元素管理的链表进行扫描，如果chrdevs[i]上已经有了链表节点，
表明之前有别的驱动程序使用的主设备号散列到chrdevs[i]上，为此函数就需要响应
的逻辑确保当前正在操作的设备号不会与这些已经使用的设备号发生冲突，如果有冲
突函数返回错误码，表明本次调用失败。
如果本次调用使用的设备号与chrdevs[i]上已经有的设备号没有发生冲突，先前分配
的struct char_device_struct对象cd将加入到chrdevs[i]领衔的链表中成为一个新的节点。




系统刚开始运行时，数组的初始化状态:

   chrdevs[255]
   +---------------+
  0|  0x0000_0000  |
   +---------------+
  1|  0x0000_0000  |--------
   +---------------+     ^
  2|  0x0000_0000  |     |
   +---------------+     |
   |               |     |
   |               |
   |               | 可动态分配
   |               | 主设备号的范围
   |               |
   |               |     |
   |               |     |
   +---------------+     v
254|  0x0000_0000  |---------
   +---------------+

一个具体的实例：
假设chrdevs数组初始化时，有个设备的主设备号为257，次设备为0,1,2,3（有四个次设备）。
假设又有一个设备驱动使用主设备号为2，次设备号为0，则调用函数
register_chrdev_region（MKDEV(2,0),1,”augdev”）来向系统注册设备号，i=2%255=2属于
同一个哈希索引值，也索引到chrdevs数组的第二项。这时候俩设备号MKDEV(257，0)和
MKDEV(2，0)并不冲突，所以注册总会成功的。节点在插入哈希表中采用的是插入排序，这导致
哈希表按照major的大小进行递增排序，此时chrdevs的数组状态如下图：


   chrdevs[255]
   +---------------+
  0|  0x0000_0000  |
   +---------------+
  1|  0x0000_0000  |
   +---------------+           0xC800_0108
  2|  0xC800_0108  |--------->+-------------+   
   +---------------+          |  next       |------------> 0xC800_0104    
   |               |          +-------------+             +-------------+
   |               |          |  major=2    |             |  next=NULL  |
   |               |          +-------------+             +-------------+
   |               |          | baseminor=0 |             |  major=257  |
   |               |          +-------------+             +-------------+
   |               |          | minorct=1   |             | baseminor=0 |
   |               |          +-------------+             +-------------+
   +---------------+          |  "augdev"   |             | minorct=4   |
254|  0x0000_0000  |          +-------------+             +-------------+
   +---------------+        struct char_device_struct     |  "demodev"  |
                                                          +-------------+
                                                     struct char_device_struct





(2)alloc_chrdev_region函数
动态分配设备号，分配的主设备号的范围在1-254之间
核心调用也是__register_chrdev_region.
相对于register_chrdev_region，alloc_chrdev_region在调用__register_chrdev_region时
第一个参数为0，将导致__register_chrdev_region执行如下逻辑：

static struct char_device_struct * 
__register_chrdev_region(unsigned int major, unsigned int baseminor, 
		int minorct, const char *name) 
{
	//...
	if (major == 0) {
		for (i = ARRAY_SIZE(chrdevs)-1; i > 0; i--) {
			if (chrdevs[i] == NULL)
				break;
		}

		if (i == 0) {
			ret = -EBUSY;
			goto out;
		}
		major = i;
	}
	//...
}


在for循环中从chrdevs数组的最后一项（也就是第254项）一次向前扫描，如果发现该数组
中的某项，比如第i项，对应的数值为NULL,那么就把该项对应的索引值i作为分配的主设备
号返回给驱动程序，同时生成一个struct char_device_struct节点，并将其加入到
chrdevs[i]对应的哈希链表中。
如果从第254项一直到第一项，其中所有的项对应的指针都不为NULL，那么函数失败并返回
一非0值，表明动态分配设备号失败，分配成功后通过将新分配的设备号返回给函数的调用者。 

无论是静态分配还是动态分配，系统都是通过unregister_chrdev_region负责释放设备号。

references:
-----------
https://blog.csdn.net/liebao_han/article/details/78931683
